// schema.prisma atualizado
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "foreignKeys" 
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String        @unique
  password      String
  role          String        @default("USER")
  avatarUrl     String?
  createdAt     DateTime      @default(now()) @db.Timestamp(6)
  updatedAt     DateTime      @updatedAt @db.Timestamp(6)
  reviews       Review[]
  addedMovies   Movie[]
  sessions      Session[]
  refreshTokens RefreshToken[]
  isActive      Boolean       @default(true)
}

model Movie {
  id            Int      @id @default(autoincrement())
  title         String
  description   String   @db.VarChar(1200)
  releaseYear   Int
  imageUrl      String?
  genre         String?
  director      String?
  reviews       Review[]
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt @db.Timestamp(6)

  addedBy       User     @relation(fields: [addedByUserId], references: [id])
  addedByUserId Int
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId Int
  expiresAt DateTime
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
  isRevoked Boolean  @default(false)

  @@index([userId])
  @@index([sessionId])
}

model Session {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  deviceInfo   String
  lastActivity DateTime       @default(now())
  isActive     Boolean        @default(true)
  ipAddress    String?
  userAgent    String?        @db.Text
  createdAt    DateTime       @default(now()) @db.Timestamp(6)
  updatedAt    DateTime       @updatedAt @db.Timestamp(6)
  refreshTokens RefreshToken[]

  @@index([userId])
}